plugins {
	id 'org.jetbrains.kotlin.jvm' version '2.0.0'
	id 'org.jetbrains.kotlin.plugin.spring' version '2.0.0'
	id 'org.springframework.boot' version '3.4.3'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'org.jetbrains.kotlin.plugin.jpa' version '2.0.0'
	id 'jacoco'
	id "org.sonarqube" version "6.0.1.5171"
}

group = 'br.com.fiap.hackaton'
version = '0.0.1'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

ext {
	springdocVersion = "2.8.1"
	kotlinSdkVersion = "1.3.112"
	smithyKotlinVersion = "1.0.10"
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.flywaydb:flyway-database-postgresql'
	implementation 'org.flywaydb:flyway-core:10.15.2'
	implementation 'org.postgresql:postgresql:42.7.5'
	implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
	implementation 'org.jetbrains.kotlin:kotlin-reflect'
	implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${springdocVersion}"
	implementation "org.springdoc:springdoc-openapi-starter-common:${springdocVersion}"
	implementation("software.amazon.awssdk:s3:2.20.0")
	implementation(platform("software.amazon.awssdk:bom:2.21.30"))
	implementation("software.amazon.awssdk:sqs")
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.jetbrains.kotlin:kotlin-test-junit5'
	testImplementation("com.ninja-squad:springmockk:4.0.2") {
		exclude module: 'mockito-core'
	}
	testImplementation("io.mockk:mockk:1.13.10")
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

kotlin {
	compilerOptions {
		freeCompilerArgs.addAll '-Xjsr305=strict'
	}
}

allOpen {
	annotation 'jakarta.persistence.Entity'
	annotation 'jakarta.persistence.MappedSuperclass'
	annotation 'jakarta.persistence.Embeddable'
}

tasks.named('test') {
	useJUnitPlatform()
}

test {
	finalizedBy jacocoTestReport
}

jacoco {
	toolVersion = "0.8.12"
}

jacocoTestReport {
	dependsOn(test)
	reports {
		xml.required.set(false)
		csv.required.set(false)
		html.required.set(true)
	}

	classDirectories.setFrom(files(classDirectories.files.collect {
		fileTree(dir: it, exclude: [
				'**/br/com/fiap/hackaton/controller/core/exception/**',
				'**/br/com/fiap/hackaton/controller/infrastructure/api/ErrorController*',
				'**/br/com/fiap/hackaton/controller/infrastructure/config/**',
				'**/br/com/fiap/hackaton/controller/infrastructure/persistence/**',
				'**/br/com/fiap/hackaton/controller/ControllerApplication*'])

	}))
}

jacocoTestCoverageVerification {
	violationRules {
		rule{
			limit {
				minimum = 0.8
			}
		}
		rule {
			limit {
				counter = 'BRANCH'
				value = 'COVEREDRATIO'
				minimum = 0.7
			}
		}
		rule {
			limit {
				counter = 'CLASS'
				value = 'COVEREDRATIO'
				minimum = 0.8
			}
		}
		rule {
			limit {
				counter = 'METHOD'
				value = 'COVEREDRATIO'
				minimum = 0.8
			}
		}
	}
}

check.dependsOn jacocoTestCoverageVerification

sonar {
	properties {
		property "sonar.projectKey", "tiagogn_fiap-hackaton-controller"
		property "sonar.organization", "fiap-lanchonete-soat8"
		property "sonar.host.url", "https://sonarcloud.io"
		property "sonar.exclusions", "**/build/**," +
				"**/test/**,**/src/test/**," +
				"**/src/main/resources/**," +
				"**/ControllerApplication*" +
				"**src/main/kotlin/br/com/fiap/hackaton/controller/core/exception/**," +
				"**src/main/kotlin/br/com/fiap/hackaton/controller/infrastructure/api/ErrorController*," +
				"**src/main/kotlin/br/com/fiap/hackaton/controller/infrastructure/config/**," +
				"**src/main/kotlin/br/com/fiap/hackaton/controller/infrastructure/persistence/**"
		property "sonar.coverage.exclusions", "**/build/**," +
				"**/test/**,**/src/test/**," +
				"**/src/main/resources/**," +
				"**/ControllerApplication*" +
				"**src/main/kotlin/br/com/fiap/hackaton/controller/core/exception/**," +
				"**src/main/kotlin/br/com/fiap/hackaton/controller/infrastructure/api/ErrorController*," +
				"**src/main/kotlin/br/com/fiap/hackaton/controller/infrastructure/config/**," +
				"**src/main/kotlin/br/com/fiap/hackaton/controller/infrastructure/persistence/**"
	}
}

tasks.named("jar") {
	enabled = false
}
