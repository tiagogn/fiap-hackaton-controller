plugins {
	id 'org.jetbrains.kotlin.jvm' version '1.9.25'
	id 'org.jetbrains.kotlin.plugin.spring' version '1.9.25'
	id 'org.springframework.boot' version '3.4.3'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'org.jetbrains.kotlin.plugin.jpa' version '1.9.25'
	id 'jacoco'
}

group = 'br.com.fiap.hackaton'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.flywaydb:flyway-database-postgresql'
	implementation 'org.flywaydb:flyway-core:10.15.2'
	implementation 'org.postgresql:postgresql:42.7.5'
	implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
	implementation 'org.jetbrains.kotlin:kotlin-reflect'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.jetbrains.kotlin:kotlin-test-junit5'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

kotlin {
	compilerOptions {
		freeCompilerArgs.addAll '-Xjsr305=strict'
	}
}

allOpen {
	annotation 'jakarta.persistence.Entity'
	annotation 'jakarta.persistence.MappedSuperclass'
	annotation 'jakarta.persistence.Embeddable'
}

tasks.named('test') {
	useJUnitPlatform()
}

test {
	finalizedBy jacocoTestReport
}

jacoco {
	toolVersion = "0.8.12"
}

jacocoTestReport {
	dependsOn(test)
	reports {
		xml.required.set(false)
		csv.required.set(false)
		html.required.set(true)
	}
}

jacocoTestCoverageVerification {
	violationRules {
		rule{
			limit {
				minimum = 0.8
			}
		}
		rule {
			limit {
				counter = 'BRANCH'
				value = 'COVEREDRATIO'
				minimum = 0.7
			}
		}
		rule {
			limit {
				counter = 'CLASS'
				value = 'COVEREDRATIO'
				minimum = 0.8
			}
		}
		rule {
			limit {
				counter = 'METHOD'
				value = 'COVEREDRATIO'
				minimum = 0.8
			}
		}
	}
}

check.dependsOn jacocoTestCoverageVerification