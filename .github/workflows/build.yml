name: Build CI/CD
on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]
env:
  AWS_REGION: us-east-1
  ECS_CLUSTER: my-ecs-cluster
  ECS_SERVICE: fiap-hackaton-controller-service
  ECS_TASK_DEFINITION: task-def.json
  CONTAINER_NAME: fiap-hackaton-controller
  IMAGE_NAME: fiap-hackaton-controller
jobs:
  build:
    name: Build and analyze
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu' # Alternative distribution options are available
      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
      - name: Build and analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./gradlew build sonar --info
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Extract version
        id: extract_version
        run: echo "VERSION=$(./gradlew -q printVersion)" >> $GITHUB_ENV
      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/fiap-hackaton-controller:${{ env.VERSION }} .
      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/fiap-hackaton-controller:${{ env.VERSION }}
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
  
      - name: Download ECS task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition $ECS_TASK_DEFINITION \
            --query taskDefinition > task-definition.json
  
      - name: Update image in task definition
        run: |
          jq --arg IMAGE "$IMAGE_NAME:"$VERSION \
            --arg NAME "$CONTAINER_NAME" \
            '(.containerDefinitions[] | select(.name == $NAME) | .image) = $IMAGE' \
            task-definition.json > new-task-def.json
  
      - name: Register new task definition
        id: register-task-def
        run: |
          TASK_DEF_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://new-task-def.json \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)
          echo "TASK_DEF_ARN=$TASK_DEF_ARN" >> $GITHUB_ENV
  
      - name: Deploy to ECS
        run: |
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE \
            --task-definition $TASK_DEF_ARN
